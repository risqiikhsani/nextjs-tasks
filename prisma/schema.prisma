// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles to enforce role-based access
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ClassRole {
  CREATOR
  ADMIN
  MEMBER
}

enum OrgRole {
  CREATOR
  ADMIN
  MEMBER
}

enum TaskType {
  READING
  MEETING
  DISCUSSION
  PRESENTATION
  SUBMISSION
  EXAM
}

model OrganizationSettings {
  id Int @id @unique @default(autoincrement())

  // 1 to 1 Organization
  org   Organization @relation(fields: [orgId], references: [id])
  orgId String       @unique

  private         Boolean @default(false)
  join_permission Boolean @default(false)
  enable_qna      Boolean @default(false)
  enable_ai       Boolean @default(false)
}

model Organization {
  id          String  @id @unique @default(uuid())
  name        String?
  description String?
  picture     String?
  address     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship with creator (only Admin can create)
  creator   User   @relation("OrgCreator", fields: [creatorId], references: [id])
  creatorId String

  classes Class[] @relation("OrganizationClass")

  // 1 to 1 organization settings
  settings OrganizationSettings?

  members  OrganizationMember[]
  requests JoinRequest[]
}

model User {
  id              String   @id @unique @default(uuid())
  email           String   @unique
  username        String?  @unique
  password        String?
  name            String?
  role            UserRole @default(USER)
  profile_picture String?

  // Relationships
  createdOrgs    Organization[] @relation("OrgCreator")
  createdClasses Class[]        @relation("ClassCreator")
  createdCourses Course[]       @relation("CourseCreator")
  createdTasks   Task[]         @relation("TaskCreator")
  createdNotes   Note[]         @relation("NoteCreator")

  // Many-to-Many relationships for enrollments
  enrolledClasses ClassEnrollment[]
  joinedOrgs      OrganizationMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // for students
  submittedTasks TaskSubmission[] @relation("TaskSubmitter")
  JoinRequest    JoinRequest[]
}

model Note {
  id    Int     @id @default(autoincrement())
  title String
  text  String?

  // Relationship with creator (only Admin can create)
  creator   User   @relation("NoteCreator", fields: [creatorId], references: [id])
  creatorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  password    String?

  // Relationship with creator (only Admin can create)
  creator   User   @relation("ClassCreator", fields: [creatorId], references: [id])
  creatorId String

  org   Organization @relation("OrganizationClass", fields: [orgId], references: [id])
  orgId String

  // Courses within this class
  courses Course[] @relation("ClassCourses")

  // Students enrolled in this class
  members ClassEnrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Join {
//   id        Int    @id @default(autoincrement())
//   creator   User   @relation("JoinRequester", fields: [creatorId], references: [id])
//   creatorId String
//   createdAt DateTime @default(now())
// }

model Course {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  // Relationship with parent class
  class   Class @relation("ClassCourses", fields: [classId], references: [id], onDelete: Cascade)
  classId Int

  // Relationship with creator (only Admin can create)
  creator   User   @relation("CourseCreator", fields: [creatorId], references: [id])
  creatorId String

  // Tasks within this Course
  tasks Task[] @relation("CourseTasks")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  detail      String?
  image       String?

  // Time constraints for task availability
  availableFrom DateTime? // When the task becomes accessible
  availableTo   DateTime? // When the task is no longer accessible

  type TaskType?

  // Indicates if the task is currently active/visible
  isActive Boolean @default(true)

  // Relationship with parent Course
  course   Course @relation("CourseTasks", fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int

  // Relationship with creator (only Admin can create)
  creator   User   @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId String

  // Optional related submission model (not fully implemented here)
  submissions TaskSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Optional model to track student submissions
model TaskSubmission {
  id Int @id @default(autoincrement())

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  creator   User   @relation("TaskSubmitter", fields: [creatorId], references: [id])
  creatorId String

  submissionContent String?
  submissionFile    String?

  submittedAt  DateTime @default(now())
  grade        Float?
  gradeComment String?

  @@unique([taskId, creatorId])
}

model ClassEnrollment {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  class    Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId  Int
  joinedAt DateTime  @default(now())
  role     ClassRole @default(MEMBER)

  @@unique([userId, classId])
}

model OrganizationMember {
  id       Int          @id @default(autoincrement())
  user     User         @relation(fields: [userId], references: [id])
  userId   String
  org      Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId    String
  role     OrgRole      @default(MEMBER)
  joinedAt DateTime     @default(now())

  @@unique([userId, orgId])
}

model JoinRequest {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  createdAt DateTime     @default(now())
  message   String?

  @@unique([userId,orgId])
}
